name: CONTINUOUS-INTEGRATION

on:

  # Called from solution repos
  workflow_call:
    inputs:
      feature:
        required: true
        type: string
      target-ref:
        required: true
        type: string
      soln-group:
        required: false
        type: string
        default: 'missing'
      site-url:
        required: false
        type: string
        default: ${{ format('https://{0}.github.io/{1}', github.repository_owner, github.event.repository.name) }}
      check-links:
        required: false
        type: string
        default: 'false'
      deploy-to:
        required: false
        type: string
        default: 'GITHUB-PAGES'
      repo-stage:
        required: false
        type: string
        default: 'missing'
      repo-prod:
        required: false
        type: string
        default: 'missing'
      repo-gitops:
        required: false
        type: string
        default: 'missing'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:

  # Dispatch event (ci-on-main) to GitOps repo
  dispatch-cicd-start:
    name: ðŸ“¨ CICD Event - Start
    if: ${{ inputs.repo-gitops != 'missing' }}
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      contents: none
    steps:
      - name: Dispatch
        uses: actions/github-script@v7
        env:
          OWNER: ${{ github.repository_owner }}
          REPO_GITOPS: ${{ inputs.repo-gitops }}
          PHASE: 'start'
          OUTCOME: 'success'
        with:
          github-token: ${{ secrets.PIPELINE_PAT }}
          script: |
            const { OWNER, REPO_GITOPS, PHASE, OUTCOME } = process.env
            const repo = /[^/]*$/.exec(`${REPO_GITOPS}`)[0];
            console.log(repo)
            github.rest.repos.createDispatchEvent({
              owner: `${OWNER}`,
              repo: `${repo}`,
              event_type: 'cicd-event',
              client_payload: { "phase": `${PHASE}`, "outcome": `${OUTCOME}` }
            });

  set-tag:
    name: ðŸ”– Set Tag
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: none
    outputs:
      tag: ${{ steps.setoutput.outputs.TAG }}
    steps:
      
    - name: Output Tag
      id: setoutput
      run: |
        build="BUILD-$(date '+%Y.%m.%d.%H.%M')" || 'ERROR'
        echo "$build"
        echo "TAG=$build" >> $GITHUB_OUTPUT          

  # Build for specific solution
  build:
    name: ðŸ”¨ Build
    needs: [set-tag]
    uses: ./.github/workflows/build-nodejs.yml
    permissions:
      contents: read
    secrets: inherit
    with: 
      target-ref: ${{ inputs.target-ref }}
      artefact-ref: ${{ needs.set-tag.outputs.tag }}
      feature: ${{ inputs.feature }}
      site-url: ${{ inputs.site-url }}

  # Dispatch event (ci-on-main) to GitOps repo
  dispatch-cicd-build:
    name: ðŸ“¨ CICD Event - Build
    needs: [build]
    if: ${{ inputs.repo-gitops != 'missing' }}
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      contents: none
    steps:
      - name: Dispatch
        uses: actions/github-script@v7
        env:
          OWNER: ${{ github.repository_owner }}
          REPO_GITOPS: ${{ inputs.repo-gitops }}
          PHASE: 'build'
          OUTCOME: ${{ needs.build.result }}
        with:
          github-token: ${{ secrets.PIPELINE_PAT }}
          script: |
            const { OWNER, REPO_GITOPS, PHASE, OUTCOME } = process.env
            const repo = /[^/]*$/.exec(`${REPO_GITOPS}`)[0];
            console.log(repo)
            github.rest.repos.createDispatchEvent({
              owner: `${OWNER}`,
              repo: `${repo}`,
              event_type: 'cicd-event',
              client_payload: { "phase": `${PHASE}`, "outcome": `${OUTCOME}` }
            });

  ### Pre-deployment tests on the package from build above



  # Tag the release
  tag-release:
    name: ðŸš€ Tag and Release
    needs: [set-tag, build]
    uses: ./.github/workflows/tag-release.yml
    permissions:
      contents: write
    secrets: inherit
    with:
      tag: ${{ needs.set-tag.outputs.tag }}
      target-ref: ${{ inputs.target-ref }}
      feature: ${{ inputs.feature }}

  # Deploy to GitHub Pages in Solution Repo (considered the CI environment)
  # Note: Uses artefacts created by build jobs above
  deploy-ci:
    name: Deploy CI
    needs: [set-tag, build, tag-release]
    uses: ./.github/workflows/deploy-static-site.yml
    permissions:
      contents: write
      pages: write
      id-token: write
    with:
      target-deploy: 'ci'
      target-purpose: 'quality'
      artefact-ref: ${{ needs.set-tag.outputs.tag }}
      deploy-to: ${{ inputs.deploy-to }}
    secrets: inherit

  # Dispatch event (ci-on-main) to GitOps repo
  dispatch-cicd-ci:
    name: ðŸ“¨ CICD Event - Deploy CI
    needs: [deploy-ci]
    if: ${{ inputs.repo-gitops != 'missing' }}
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      contents: none
    steps:
      - name: Dispatch
        uses: actions/github-script@v7
        env:
          OWNER: ${{ github.repository_owner }}
          REPO_GITOPS: ${{ inputs.repo-gitops }}
          PHASE: 'ci'
          OUTCOME: ${{ needs.deploy-ci.result }}
        with:
          github-token: ${{ secrets.PIPELINE_PAT }}
          script: |
            const { OWNER, REPO_GITOPS, PHASE, OUTCOME } = process.env
            const repo = /[^/]*$/.exec(`${REPO_GITOPS}`)[0];
            console.log(repo)
            github.rest.repos.createDispatchEvent({
              owner: `${OWNER}`,
              repo: `${repo}`,
              event_type: 'cicd-event',
              client_payload: { "phase": `${PHASE}`, "outcome": `${OUTCOME}` }
            });

  ### Run CI Post-Deployment Tests here

  # Test for broken hyperlinks
  check-links:
    name: ðŸ”— Check Links
    needs: [deploy-ci]
    if: ${{ inputs.check-links == 'true' }}
    uses: ./.github/workflows/check-links.yml
    permissions:
      contents: read
    secrets: inherit
    with: 
      site-url: ${{ inputs.site-url }}

  # Dispatch to trigger deployment to Stage Environment
  dispatch-stg:
    name: Dispatch STG
    needs: [build, check-links]
    if: ${{ inputs.repo-stage != 'missing' }}
    uses: ./.github/workflows/deployment-dispatch.yml
    permissions:
      contents: write
    with:
      soln-group: ${{ inputs.soln-group }}
      blue-green: 'blue'
      target-repo: ${{ inputs.repo-stage }}
    secrets: inherit
